MODULE main
VAR
    bal : array 0..2 of 0..5;
    state : array 0..2 of {D, W, L, R, I};
    transfer_in : array 0..2 of 0..2;
ASSIGN

    init(bal[0]) := 0;
    init(bal[1]) := 0;
    init(bal[2]) := 0;

    next(state[0]) := {D, W, L, R, I};
    next(state[1]) := {D, W, L, R, I};
    next(state[2]) := {D, W, L, R, I};

    next(transfer_in[0]) := case
        (state[1] = L & bal[1] > 0) & (state[2] = R & bal[2] > 0) & (bal[0] < 3 | (bal[0] < 4 & state[0] != D)) : 2;
        (state[1] = L & bal[1] > 0) | (state[2] = R & bal[2] > 0) & (bal[0] < 4 | (bal[0] < 5 & state[0] != D)) : 1;
        TRUE : 0;
    esac;

    next(transfer_in[1]) := case
        (state[2] = L & bal[2] > 0) & (state[0] = R & bal[0] > 0) & (bal[1] < 3 | (bal[1] < 4 & state[1] != D)) : 2;
        (state[2] = L & bal[2] > 0) | (state[0] = R & bal[0] > 0) & (bal[1] < 4 | (bal[1] < 5 & state[1] != D)) : 1;
        TRUE : 0;
    esac;

    next(transfer_in[2]) := case
        (state[0] = L & bal[0] > 0) & (state[1] = R & bal[1] > 0) & (bal[2] < 3 | (bal[2] < 4 & state[2] != D)) : 2;
        (state[0] = L & bal[0] > 0) | (state[1] = R & bal[1] > 0) & (bal[2] < 4 | (bal[2] < 5 & state[2] != D)) : 1;
        TRUE : 0;
    esac;

    next(bal[0]) := case
        (state[0] = D & bal[0] < 5) : bal[0] + 1 + transfer_in[0];
        (state[0] = W & bal[0] > 0) : (bal[0] - 1) + transfer_in[0];
        (state[0] = L & bal[0] > 0) & bal[1] < 5 & transfer_in[2] > 0 : (bal[0] - 1) + transfer_in[0];
        (state[0] = R & bal[0] > 0) & bal[2] < 5 & transfer_in[1] > 0 : (bal[0] - 1) + transfer_in[0];
        TRUE : bal[0];
    esac;

    next(bal[1]) := case
        (state[1] = D & bal[1] < 5) : bal[0] + 1 + transfer_in[1];
        (state[1] = W & bal[1] > 0) : (bal[0] - 1) + transfer_in[1];
        (state[1] = L & bal[1] > 0) & bal[1] < 5 & transfer_in[0] > 0 : (bal[1] - 1) + transfer_in[1];
        (state[1] = R & bal[1] > 0) & bal[2] < 5 & (transfer_in[2] = 2 | (transfer_in[2] = 1 & state[0] != L)): (bal[1] - 1) + transfer_in[1];
        TRUE : bal[1];
    esac;

        next(bal[2]) := case
        (state[2] = D & bal[2] < 5) : bal[2] + 1 + transfer_in[2];
        (state[2] = W & bal[2] > 0) : (bal[2] - 1) + transfer_in[2];
        (state[2] = L & bal[2] > 0) & bal[1] < 5 & (transfer_in[1] = 2 | (transfer_in[1] = 1 & state[0] != R)) : (bal[2] - 1) + transfer_in[2];
        (state[2] = R & bal[2] > 0) & bal[0] < 5 & (transfer_in[0] = 2 | (transfer_in[0] = 1 & state[1] != L)) : (bal[2] - 1) + transfer_in[2];
        TRUE : bal[2];
    esac;
